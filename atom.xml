<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-05T11:27:22.154Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/02/05/Swift%20%E4%BD%BF%E7%94%A8Runtime%E8%87%AA%E5%AE%9A%E4%B9%89UIDatePicker/"/>
    <id>http://yoursite.com/2018/02/05/Swift 使用Runtime自定义UIDatePicker/</id>
    <published>2018-02-05T11:27:22.154Z</published>
    <updated>2018-02-05T11:27:22.154Z</updated>
    
    <content type="html"><![CDATA[<p>####前言：<br>UIDatePicker是比较常用的一个控件了，但是苹果却只提供极少的属性可以让我们使用，所以实际运用中难免要自定义。这里我提供俩种方法来改变UIDatePicker的显示字体颜色。显示效果如下：</p><hr><p><img src="http://upload-images.jianshu.io/upload_images/299599-710738310ceb21d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-12-07 下午11.06.45.png"></p><hr><p>######首先是第一种方法：runtime<br>我们知道，runtime可以遍历一个对象的所有属性，虽然苹果没有公开UIDatePicker的字体颜色，但是我们可以遍历查找对应的属性名，并加以修改就可以实现了。<br>关键代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//MARK:runtime遍历所有属性名，并加以修改</span><br><span class="line">    func setDateTextColor(picker:UIDatePicker)&#123;</span><br><span class="line">        var count:UInt32 = 0</span><br><span class="line">        let propertys = class_copyPropertyList(UIDatePicker.self, &amp;count)</span><br><span class="line">        for index in 0..&lt;count &#123;</span><br><span class="line">            let i = Int(index)</span><br><span class="line">            let property = propertys![i]</span><br><span class="line">            let propertyName = property_getName(property)</span><br><span class="line">            </span><br><span class="line">            let strName = String.init(cString: propertyName, encoding: String.Encoding.utf8)</span><br><span class="line">            if strName == &quot;textColor&quot;&#123;</span><br><span class="line">                picker.setValue(UIColor.red, forKey: strName!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>#####第二种方法：自定义UIPickerView<br>相比而言，UIPickerView可以使用比较多的属性进行操作，所以我们不妨曲线救国，使用UIPickerView来实现UIDatePicker的功能。此方法比较繁琐，但是可以高度自定义。</p><p>具体思路：</p><ul><li><p>准备3个数组存放年，月，日的数据，其中日的数组要根据相应的年和月来处理不同情况，月份还有闰年都会影响到，所以这一步需要小心计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/// 计算每个月的天数</span><br><span class="line">    fileprivate func daysCount(year:Int,month:Int) -&gt; Int&#123;</span><br><span class="line">        let isrunNian = year%4 == 0 ? (year%100 == 0 ? (year%400 == 0 ? true:false):true):false</span><br><span class="line">        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12&#123;</span><br><span class="line">            self.setDayArr(num: 31)</span><br><span class="line">            return 31</span><br><span class="line">        &#125;else if month == 4 || month == 6 || month == 9 || month == 11&#123;</span><br><span class="line">            self.setDayArr(num: 30)</span><br><span class="line">            return 30</span><br><span class="line">        &#125;else if month == 2&#123;</span><br><span class="line">            if isrunNian&#123;</span><br><span class="line">                self.setDayArr(num: 29)</span><br><span class="line">                return 29</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                self.setDayArr(num: 28)</span><br><span class="line">                return 28</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>数据源准备好后，就开始实现UIPickerView的代理方法吧，切换年或者月份的时候会影响到日这一列的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) &#123;</span><br><span class="line">        if component == 0 &#123;</span><br><span class="line">            yearIndex = row</span><br><span class="line">        &#125;</span><br><span class="line">        if component == 1 &#123;</span><br><span class="line">            monthIndex = row</span><br><span class="line">        &#125;</span><br><span class="line">        if component == 2 &#123;</span><br><span class="line">            dayIndex = row</span><br><span class="line">        &#125;</span><br><span class="line">        if component == 0 || component == 1&#123;</span><br><span class="line">            let selctYear = (yearArray![yearIndex!] as! NSString).intValue</span><br><span class="line">            let selctMonth = (monthArray![monthIndex!] as! NSString).intValue</span><br><span class="line">            let _ = self.daysCount(year: Int(selctYear) , month: Int(selctMonth))</span><br><span class="line">            </span><br><span class="line">            if (dayArray?.count)!-1 &lt; dayIndex! &#123;</span><br><span class="line">                dayIndex = (dayArray?.count)!-1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pickerView.reloadAllComponents()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>最后别忘了我们的初衷，就是自定义显示字体颜色。重写<br><strong>pickerView viewForRow: forComponent:(NSInteger)component reusingView:</strong>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -&gt; UIView &#123;</span><br><span class="line">        let headLabel = UILabel.init()</span><br><span class="line">        headLabel.textColor  = UIColor.red</span><br><span class="line">        headLabel.textAlignment = NSTextAlignment.center</span><br><span class="line">        if component == 0 &#123;</span><br><span class="line">            headLabel.text = yearArray?[row] as? String</span><br><span class="line">        &#125;</span><br><span class="line">        if component == 1 &#123;</span><br><span class="line">            headLabel.text = monthArray?[row] as? String</span><br><span class="line">        &#125;</span><br><span class="line">        if component == 2 &#123;</span><br><span class="line">            headLabel.text = dayArray?[row] as? String</span><br><span class="line">        &#125;</span><br><span class="line">        return headLabel</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样就大功告成了。</p><hr><p>######结语：Swift和OC在使用上还是有不少区别的，我刚用的时候也踩了不少坑，不过对于数据类型的使用确实比较严谨，感觉程序应该会更健壮了。</p><p>github项目地址： <a href="https://github.com/wang-qiuyu/CustomDatePicker" target="_blank" rel="noopener">https://github.com/wang-qiuyu/CustomDatePicker</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####前言：&lt;br&gt;UIDatePicker是比较常用的一个控件了，但是苹果却只提供极少的属性可以让我们使用，所以实际运用中难免要自定义。这里我提供俩种方法来改变UIDatePicker的显示字体颜色。显示效果如下：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/05/hello-world/"/>
    <id>http://yoursite.com/2018/02/05/hello-world/</id>
    <published>2018-02-05T08:50:21.664Z</published>
    <updated>2018-02-05T08:50:21.664Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
